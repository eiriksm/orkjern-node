vcl 4.0;

backend default {
  .host = "{{ varnish_default_backend_host }}";
  .port = "{{ varnish_default_backend_port }}";
}

acl purge {
  "localhost";
  "192.168.55.0"/24;
}

sub vcl_recv {
  unset req.http.proxy;
  # Add an X-Forwarded-For header with the client IP address.
  if (req.restarts == 0) {
    if (req.http.X-Forwarded-For) {
      set req.http.X-Forwarded-For = req.http.X-Forwarded-For + ", " + client.ip;
    }
    else {
      set req.http.X-Forwarded-For = client.ip;
    }
  }
  if (req.http.cf-connecting-ip) {
    unset req.http.X-Forwarded-For;
    set req.http.X-Forwarded-For = req.http.cf-connecting-ip;
  }
  if (req.http.X-Forwarded-Proto == "http") {
    return (synth(750, ""));
  }
  if (req.http.host ~ "^www\.") {
    return (synth (751, ""));
  }
  # Only allow BAN requests from IP addresses in the 'purge' ACL.
  if (req.method == "BAN") {
    # Same ACL check as above:
    if (!client.ip ~ purge) {
      return (synth(403, "Not allowed."));
    }

    # Logic for the ban, using the X-Cache-Tags header.
    if (req.http.X-Drupal-Cache-Tags) {
      ban("obj.http.X-Drupal-Cache-Tags ~ " + req.http.X-Drupal-Cache-Tags);
    }
    else {
      return (synth(403, "X-Cache-Tags header missing."));
    }

    # Throw a synthetic page so the request won't go to the backend.
    return (synth(200, "Ban added."));
  }
  # Only cache GET and HEAD requests (pass through POST requests).
  if (req.method != "GET" && req.method != "HEAD") {
    return (pass);
  }
  # Pass through any administrative or AJAX-related paths.
  if (req.url ~ "^/status\.php$" ||
    req.url ~ "^/update\.php$" ||
    req.url ~ "^/admin$" ||
    req.url ~ "^/admin/.*$" ||
    req.url ~ "^/flag/.*$" ||
    req.url ~ "^.*/ajax/.*$" ||
    req.url ~ "^.*/ahah/.*$") {
      return (pass);
  }
  # Removing cookies for static content so Varnish caches these files.
  if (req.url ~ "(?i)\.(pdf|asc|dat|txt|doc|xls|ppt|tgz|csv|png|gif|jpeg|jpg|ico|swf|css|js)(\?.*)?$") {
    unset req.http.Cookie;
  }
}

sub vcl_hash {
  # URL and hostname/IP are the default components of the vcl_hash
  # implementation. We add more below.
  hash_data(req.url);
  if (req.http.host) {
      hash_data(req.http.host);
  } else {
      hash_data(server.ip);
  }
  # Include the X-Forward-Proto header, since we want to treat HTTPS
  # requests differently, and make sure this header is always passed
  # properly to the backend server.
  if (req.http.X-Forwarded-Proto) {
    hash_data(req.http.X-Forwarded-Proto);
  }
}

sub vcl_backend_response {
    # Set ban-lurker friendly custom headers.
    set beresp.http.X-Url = bereq.url;
    set beresp.http.X-Host = bereq.http.host;
}

sub vcl_synth {
  if (resp.status == 750) {
    set resp.status = 301;
    set resp.http.Location = "https://" + req.http.host + req.url;
    return(deliver);
  }
  if (resp.status == 751) {
    set resp.status = 301;
    set resp.http.Location = "https://" + regsuball(req.http.host, "^www\.", "") + req.url;
    return(deliver);
  }
}

sub vcl_deliver {
    # Remove ban-lurker friendly custom headers when delivering to client.
    unset resp.http.X-Url;
    unset resp.http.X-Host;
    unset resp.http.Purge-Cache-Tags;

    if (obj.hits > 0) {
        set resp.http.X-Varnish-Cache = "HIT";
    }
    else {
        set resp.http.X-Varnish-Cache = "MISS";
    }
}
